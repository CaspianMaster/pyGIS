Traceback (most recent call last):
  File "/home/mmann1123/anaconda3/envs/pygisbook/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/home/mmann1123/anaconda3/envs/pygisbook/lib/python3.7/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/mmann1123/anaconda3/envs/pygisbook/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/mmann1123/anaconda3/envs/pygisbook/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/mmann1123/anaconda3/envs/pygisbook/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/home/mmann1123/anaconda3/envs/pygisbook/lib/python3.7/site-packages/nbclient/client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/home/mmann1123/anaconda3/envs/pygisbook/lib/python3.7/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/mmann1123/anaconda3/envs/pygisbook/lib/python3.7/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import matplotlib.pyplot as plt
plt.style.use('bmh') # better for plotting geometries vs general plots.

world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_cities'))
northern_world = world.iloc[ 0:4 ]    
plt.plot(northern_world,figsize=(10, 5))  
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-3-b07a92c3e680>[0m in [0;36m<module>[0;34m[0m
[1;32m      4[0m [0mworld[0m [0;34m=[0m [0mgeopandas[0m[0;34m.[0m[0mread_file[0m[0;34m([0m[0mgeopandas[0m[0;34m.[0m[0mdatasets[0m[0;34m.[0m[0mget_path[0m[0;34m([0m[0;34m'naturalearth_cities'[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0mnorthern_world[0m [0;34m=[0m [0mworld[0m[0;34m.[0m[0miloc[0m[0;34m[[0m [0;36m0[0m[0;34m:[0m[0;36m4[0m [0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mnorthern_world[0m[0;34m,[0m[0mfigsize[0m[0;34m=[0m[0;34m([0m[0;36m10[0m[0;34m,[0m [0;36m5[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0mplt[0m[0;34m.[0m[0mshow[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/pygisbook/lib/python3.7/site-packages/matplotlib/pyplot.py[0m in [0;36mplot[0;34m(scalex, scaley, data, *args, **kwargs)[0m
[1;32m   2840[0m     return gca().plot(
[1;32m   2841[0m         [0;34m*[0m[0margs[0m[0;34m,[0m [0mscalex[0m[0;34m=[0m[0mscalex[0m[0;34m,[0m [0mscaley[0m[0;34m=[0m[0mscaley[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2842[0;31m         **({"data": data} if data is not None else {}), **kwargs)
[0m[1;32m   2843[0m [0;34m[0m[0m
[1;32m   2844[0m [0;34m[0m[0m

[0;32m~/anaconda3/envs/pygisbook/lib/python3.7/site-packages/matplotlib/axes/_axes.py[0m in [0;36mplot[0;34m(self, scalex, scaley, data, *args, **kwargs)[0m
[1;32m   1741[0m         """
[1;32m   1742[0m         [0mkwargs[0m [0;34m=[0m [0mcbook[0m[0;34m.[0m[0mnormalize_kwargs[0m[0;34m([0m[0mkwargs[0m[0;34m,[0m [0mmlines[0m[0;34m.[0m[0mLine2D[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1743[0;31m         [0mlines[0m [0;34m=[0m [0;34m[[0m[0;34m*[0m[0mself[0m[0;34m.[0m[0m_get_lines[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0mdata[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1744[0m         [0;32mfor[0m [0mline[0m [0;32min[0m [0mlines[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1745[0m             [0mself[0m[0;34m.[0m[0madd_line[0m[0;34m([0m[0mline[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/pygisbook/lib/python3.7/site-packages/matplotlib/axes/_base.py[0m in [0;36m__call__[0;34m(self, data, *args, **kwargs)[0m
[1;32m    271[0m                 [0mthis[0m [0;34m+=[0m [0margs[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    272[0m                 [0margs[0m [0;34m=[0m [0margs[0m[0;34m[[0m[0;36m1[0m[0;34m:[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 273[0;31m             [0;32myield[0m [0;32mfrom[0m [0mself[0m[0;34m.[0m[0m_plot_args[0m[0;34m([0m[0mthis[0m[0;34m,[0m [0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    274[0m [0;34m[0m[0m
[1;32m    275[0m     [0;32mdef[0m [0mget_next_color[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/pygisbook/lib/python3.7/site-packages/matplotlib/axes/_base.py[0m in [0;36m_plot_args[0;34m(self, tup, kwargs)[0m
[1;32m    394[0m             [0mself[0m[0;34m.[0m[0maxes[0m[0;34m.[0m[0mxaxis[0m[0;34m.[0m[0mupdate_units[0m[0;34m([0m[0mx[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    395[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0maxes[0m[0;34m.[0m[0myaxis[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 396[0;31m             [0mself[0m[0;34m.[0m[0maxes[0m[0;34m.[0m[0myaxis[0m[0;34m.[0m[0mupdate_units[0m[0;34m([0m[0my[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    397[0m [0;34m[0m[0m
[1;32m    398[0m         [0;32mif[0m [0mx[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m [0;34m!=[0m [0my[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/pygisbook/lib/python3.7/site-packages/matplotlib/axis.py[0m in [0;36mupdate_units[0;34m(self, data)[0m
[1;32m   1464[0m         [0mneednew[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mconverter[0m [0;34m!=[0m [0mconverter[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1465[0m         [0mself[0m[0;34m.[0m[0mconverter[0m [0;34m=[0m [0mconverter[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1466[0;31m         [0mdefault[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mconverter[0m[0;34m.[0m[0mdefault_units[0m[0;34m([0m[0mdata[0m[0;34m,[0m [0mself[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1467[0m         [0;32mif[0m [0mdefault[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m [0;32mand[0m [0mself[0m[0;34m.[0m[0munits[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1468[0m             [0mself[0m[0;34m.[0m[0mset_units[0m[0;34m([0m[0mdefault[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/pygisbook/lib/python3.7/site-packages/matplotlib/category.py[0m in [0;36mdefault_units[0;34m(data, axis)[0m
[1;32m    105[0m         [0;31m# the conversion call stack is default_units -> axis_info -> convert[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    106[0m         [0;32mif[0m [0maxis[0m[0;34m.[0m[0munits[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 107[0;31m             [0maxis[0m[0;34m.[0m[0mset_units[0m[0;34m([0m[0mUnitData[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    108[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    109[0m             [0maxis[0m[0;34m.[0m[0munits[0m[0;34m.[0m[0mupdate[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/pygisbook/lib/python3.7/site-packages/matplotlib/category.py[0m in [0;36m__init__[0;34m(self, data)[0m
[1;32m    174[0m         [0mself[0m[0;34m.[0m[0m_counter[0m [0;34m=[0m [0mitertools[0m[0;34m.[0m[0mcount[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    175[0m         [0;32mif[0m [0mdata[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 176[0;31m             [0mself[0m[0;34m.[0m[0mupdate[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    177[0m [0;34m[0m[0m
[1;32m    178[0m     [0;34m@[0m[0mstaticmethod[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/pygisbook/lib/python3.7/site-packages/matplotlib/category.py[0m in [0;36mupdate[0;34m(self, data)[0m
[1;32m    207[0m         [0;31m# check if convertible to number:[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    208[0m         [0mconvertible[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 209[0;31m         [0;32mfor[0m [0mval[0m [0;32min[0m [0mOrderedDict[0m[0;34m.[0m[0mfromkeys[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    210[0m             [0;31m# OrderedDict just iterates over unique values in data.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    211[0m             [0mcbook[0m[0;34m.[0m[0m_check_isinstance[0m[0;34m([0m[0;34m([0m[0mstr[0m[0;34m,[0m [0mbytes[0m[0;34m)[0m[0;34m,[0m [0mvalue[0m[0;34m=[0m[0mval[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mTypeError[0m: unhashable type: 'numpy.ndarray'
TypeError: unhashable type: 'numpy.ndarray'

